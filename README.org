* Tetris in DOM
Let's attempt to implement the classic game of tetris with vanilla JS, solely using the DOM.
https://wonderful-kangaroo-a1eda1.netlify.app/
** Controls
They are vim bindings, h j k l
- h move left
- l move right
- j move down
- k rotate
** TODOS (known bugs)
- FIXED: No collision handling when moving tetroid to the left, I know what's wrong, because I handled left most boundary conditions using a ternary to artificially set x coordinate to zero, I never applied collision detection on a leftward movement. Just need to add this. IIRC there is a console log that fires for a lefthand collision.
- Tetroid set is incomplete, need mirrors of L and Z
- Rotation peculiarities on the boundaries, need to play a good implementation and see what they do. UPDATE: I know what is wrong, collision handling was intended to be done on candidate states of transition function, need to implement this, will significantly clean up callback functions as well.
** Strategy
- We will seek a "finite-state machine" implementation, where each state is mapped to its next state in as declarative of a way as is possible.
- This will most likely entail some form of evaluation function, which tests for collisions and marks "complete" rows.
** More on Finite-State Machines (FSMs)
 - Finite-state machines are a CORE concept in computing, they are in fact key to the notion of a "Turing machine", which is an ideolized, theoretically complete "computer." FSMs also show up in many other plays, in particular, the concept of "state management" motivates the existence of tools such as Redux, which we will see in mod 5 will allow us to manage large web applications by examining "slices" of state.
- Finite-state machines are one class of so called "automata", a concept we have actually seen in practice already as we've implemented John Conway's Game of Life. An automata which is "Turing complete" can be thought of as a bonafide computer, capable of evaluating any logically consistent instructions given to it. Demonstrating the "Turing completeness" of an automata is of great importance in computing. For instance, it is now known that HTML/CSS together are in fact Turing complete, despite the fact that we do not think of them as being "programming languages" in and of themselves.
- To demonstrate Turing completeness, we can simply show that a language/procedure may be used to produce a Turing complete automata, like Conway's Game of Life of Rule 110.
** Procedure
*** State
We want to clearly define the minimum state necessary to encapsulate the game of tetris. Our approach will then be to define functions which take us from one state, to another, and does so IMMUTABLY. The reasoning behind the immutability constraint will seem curious for the moment, but when it comes time to RENDER the state of the game, we will appreciate this constraint. In other words, we seek a purely functional/declarative approach to our game.
Our state will consist of a number of things; certainly the value at each cell element we will store in the form of a 2D array. Additionally, we will at the very least want some notion of "active tetroid" and mechanisms to "rotate" it. If we can define sprite sheets, which each sprite uniquely identified, a potential "rotate" function will simply know to take a tetroid from orientation 1, to say orientation 2 (where it is rotate 90 degrees). So we will take a sprite approach So we will take a sprite approach.
*** Transitions
The set of functions needed to express the FSM will be referred to as "transitions", these are functions such as rotate() or translate() which take us to a new state where our active tetroid has a new position/orientation. There will be a finite number of such helper functions that we will need.
*** Render
When a state transition has occurred, we want to "render" to the user a new view corresponding to the state of the game. It is also important to note that rendering BY DEFINITION must include some type of side-effect. In practice, in order for users to interact with an application, side-effects MUST be possible. But we will look to constrain all side-effects to a very small INTERFACE. Render cycles should occur at any state-transitions, and because tetris also evolves in time (i.e. tetroids fall), we will also need to have some default transitioning mechanism at some frame rate we feel is appropriate.
- Note on approach to rendering: if we have a mechanism which compares our "rendered" state to the true, purely functional state, we can use any "differences" between the two to trigger a new render. This is called "diffing", and we may find it useful to write a general algorithm which allows us to do this.
