* Tetris in DOM
Let's attempt to implement the classic game of tetris with vanilla JS, solely using the DOM.
** Strategy
- We will seek a "finite-state machine" implementation, where each state is mapped to its next state in as declarative of a way as is possible.
- This will most likely entail some form of evaluation function, which tests for collisions and marks "complete" rows.
** More on Finite-state Machines (FSMs)
 - Finite-state machines are a CORE concept in computing, they are in fact key to the notion of a "Turing machine", which is an ideolized, theoretically complete "computer." FSMs also show up in many other plays, in particular, the concept of "state management" motivates the existence of tools such as Redux, which we will see in mod 5 will allow us to manage large web applications by examining "slices" of state.
- Finite-state machines are one class of so called "automata", a concept we have actually seen in practice already as we've implemented John Conway's Game of Life. An automata which is "Turing complete" can be thought of as a bonafide computer, capable of evaluating any logically consistent instructions given to it. Demonstrating the "Turing completeness" of an automata is of great importance in computing. For instance, it is now known that HTML/CSS together are in fact Turing complete, despite the fact that we do not think of them as being "programming languages" in and of themselves. To demonstrate Turing completeness, we can simply show that a language/procedure may be used to produce a Turing complete automata, like Conway's Game of Life of Rule 110.
